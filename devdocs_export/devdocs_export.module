<?php

/**
 * @file
 */

function devdocs_export_menu() {
  $items = array();

  $items['system/docs/export/pdf'] = array(
    'title' => 'File export',
    'page callback' => '_devdocs_export_pdf_download',
    'page arguments' => array('docs'),
    'access arguments' => array('access developer documentation'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/reports/devdocs/export'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devdocs_export_form'),
    'access arguments' => array('access developer documentation'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function devdocs_export_libraries_info() {

  $libraries = array(
    'php-markdown' => array(
      'name' => 'PHP Markdown Extra plugin',
      'vendor url' => 'https://github.com/michelf/php-markdown/',
      'download url' => 'https://github.com/michelf/php-markdown/archive/1.4.1.zip',
      'version' => '1.4.1',
      'files' => array(
        'php' => array(
          'Michelf/MarkdownInterface.php',
          'Michelf/Markdown.php',
          'Michelf/MarkdownExtra.php',
        ),
      ),
    ),

    'dompdf' => array(
      'name' => 'dompdf',
      'vendor url' => 'http://github.com/dompdf/dompdf',
      // 'download url' => 'https://github.com/dompdf/dompdf/archive/master.zip', // https://github.com/dompdf/dompdf/issues/636
      'download url' => 'https://github.com/downloads/dompdf/dompdf/dompdf_0-6-0_beta3.tar.gz',
      'version arguments' => array(
        'file' => 'changelog.txt',
        'pattern' => '/DOMPDF (.+) Release Notes/',
        'lines' => 5,
      ),
      'files' => array(
        'php' => array('dompdf_config.inc.php'),
      ),
    ),
  );

  return $libraries;
}

function devdocs_export_form_devdocs_files_form_alter(&$form, &$form_state, $form_id) {

  foreach (element_children($form['files']) as $key) {

    $element = &$form['files'][$key];
    $title = $element['#title'];
    $uri = '/' . parse_url($element['edit_'.$title]['uri_'.$title]['#value'], PHP_URL_HOST)
      . parse_url($element['edit_'.$title]['uri_'.$title]['#value'], PHP_URL_PATH);

    $element['export_'.$title] = array(
      '#type' => 'fieldset',
      '#title' => t('Export'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $element['export_'.$title]['export_pdf'] = array(
      '#type' => 'link',
      '#title' => t('PDF'),
      '#href' => 'system/docs/export/pdf'.$uri,
    );
  }
}

/**
 * File download for dynamic files
 */
function _devdocs_export_pdf_download() {

  // Merge remainder of arguments from GET['q'], into relative file path.
  $args = func_get_args();
  global $user;
  $params = drupal_get_query_parameters($query = NULL, $exclude = array('q'));
  $op = isset($params['op']) ? $params['op'] : NULL;

  $scheme = array_shift($args);
  $target = implode('/', $args);
  $uri = $scheme . '://' . $target;
  $headers = array();

  if (file_stream_wrapper_valid_scheme($scheme) && file_exists($uri)) {
    devdocs_export_render_pdf(array($uri), array('filename' => basename($uri). '_'.date('Ymd')));
  }
  else {
    drupal_not_found();
  }

  drupal_exit();
}

/**
 * Export existing files
 */
function devdocs_export_form($form, &$form_state) {

  if (!variable_get('devdocs_path', FALSE)) drupal_goto('admin/reports/devdocs/settings');

  $directory = 'docs://';
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

  $files = file_scan_directory($directory, '/.*\.md$/');

  $form['header'] = array(
    '#type' => 'checkbox',
    '#title' => t('Header'),
    '#description' => t('Add %docpath as document header', array('%docpath' => $directory.'export/assets/header.md')),
  );

  $form['table_drag_attributes'] = array(
    '#prefix' => '<div id="attributes">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
    '#theme' => 'devdocs_export_table_drag_components',
  );

  $i = 0;

  foreach ($files as $uri => $object) {

    $form['table_drag_attributes'][$object->name]['weight'] = array(
      '#type' => 'textfield',
      '#default_value' => $i,
      '#size' => 3,
      '#attributes' => array('class' => array('item-row-weight')),
    );

    $form['table_drag_attributes'][$object->name]['uri'] = array(
      '#type' => 'hidden',
      '#value' => $object->uri,
    );

    $form['table_drag_attributes'][$object->name]['export'] = array(
      '#type' => 'checkbox',
      '#title' => str_replace($directory, '', $object->uri),
    );

    $i++;
  }

  $form['footer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Footer'),
    '#description' => t('Add %docpath as document footer', array('%docpath' => $directory.'export/assets/footer.md')),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Export'),
  );

  return $form;
}

function devdocs_export_form_submit($form, &$form_state) {

  // Get array of exportable objects

  $exportables = array();

  foreach ($form_state['values']['table_drag_attributes'] as $entry) {
    if ($entry['export'] == 1) {
      $exportables[$entry['weight']] = $entry['uri'];
    }
  }

  ksort($exportables);

  // Pack PDF
  devdocs_export_render_pdf($exportables, array(
    'header' => $form_state['values']['header'],
    'footer' => $form_state['values']['footer'],
  ));

}


// Custom theme output.
function theme_devdocs_export_table_drag_components($vars) {
  $element = $vars['element'];
  drupal_add_tabledrag('sample_table', 'order', 'sibling', 'item-row-weight');

  $header = array(
    'export' => t('Export'),
    'weight' => t('Weight'),
  );

  $rows = array();
  foreach (element_children($element) as $key) {
    $row = array();
    $row['data'] = array();
    foreach ($header as $fieldname => $title) {
      $row['data'][] = drupal_render($element[$key][$fieldname]);
      $row['class'] = array('draggable');
    }
    $rows[] = $row;
  }

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'sample_table'),
  ));
}


/**
 * Implements hook_theme().
 */
function devdocs_export_theme($existing, $type, $theme, $path) {
  $themes = array(
    'devdocs_export_table_drag_components' => array(
      'render element' => 'element'
    ),
  );
  return $themes;
}

function devdocs_export_render_pdf($documents = array(), $options_user = array()) {

  $options = array(
    'format' => 'pdf',
    'header' => FALSE,
    'footer' => FALSE,
    'filename' => 'Documentation_export_'.date('Ymd'),
  );

  $options = array_merge($options, $options_user);

  $ml = libraries_load('php-markdown');
  $dl = libraries_load('dompdf');

  if (!$ml['loaded'] || !$dl['loaded']) {

    drupal_set_message('dompdf or php-markdown library missing', 'error');

    return FALSE;
  }

  $markdownParser = new \Michelf\MarkdownExtra();
  $dd_base_path = variable_get('devdocs_path', FALSE).'/export/';

  $header_html = $footer_html = $css = '';
  $pages = array();

  // CSS
  if (file_exists($dd_base_path . 'assets/inline_style.css')) {
    $css = '<link type="text/css" href="assets/inline_style.css" rel="stylesheet" />';
  }

  // header
  if ($options['header'] && file_exists($dd_base_path . 'assets/header.md')) {
    $header_markdown = file_get_contents($dd_base_path . 'assets/header.md');
    $header_html = $markdownParser->transform($header_markdown);
  }

  // Footer
  if ($options['footer'] && file_exists($dd_base_path . 'assets/footer.md')) {
    $footer_markdown = file_get_contents($dd_base_path . 'assets/footer.md');
    $footer_html = $markdownParser->transform($footer_markdown);
  }

  // Generate pages
  foreach ($documents as $document) {

    $markdown = file_get_contents($document);
    $pages[] = $markdownParser->transform($markdown);
  }

  $html = '<html><head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    '
    .$css.
    '
    </head>
    <body>'
    .$header_html
    .$footer_html
    . implode('<div style="page-break-before: always;"></div>', $pages)
    .'</body></html>';

  $dompdf = new DOMPDF();
  $dompdf->set_base_path($dd_base_path);
  $dompdf->load_html($html, 'UTF-8');
  $dompdf->set_paper("A4");
  $dompdf->render();
  $dompdf->stream($options['filename'].'.pdf');

}
